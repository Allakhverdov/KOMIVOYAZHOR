#include<iostream>
#include<vector>
#include<queue>
struct pair
{
    pair(int to, int weight) : to(to), weight(weight){}
    pair() = default;
    int to = 0;
    int weight = 0;
};

struct ListGraph
{
    ListGraph(size_t VerticesCount);
    ListGraph() = default;
    ~ListGraph() = default;
    void AddEdge(int from, int to, int weight);
    int VCount() const;
    virtual void GetAllGraph(std::vector<std::vector<pair>>& Edges) const;
private:
    std::vector<std::vector<pair>> NextVert;
};

ListGraph::ListGraph(size_t VerticesCount)
{
    NextVert.resize(VerticesCount);
}

int ListGraph::VCount() const
{
    return NextVert.size();
}

void ListGraph::AddEdge(int from, int to, int weight)
{
    pair edge_to(to, weight);
    pair edge_from(from, 0);
    NextVert[from].push_back(edge_to);
    NextVert[to].push_back(edge_from);
}

void ListGraph::GetAllGraph(std::vector<std::vector<pair>>& Edges) const 
{
    Edges = NextVert;           //ним не хочется метять начальный граф, но хочется работать с его ребрами, поэтому этот метод  
}                               //создаё нам копию с которой мы потом работаем

struct Public_ListGraph : public ListGraph
{
    explicit Public_ListGraph(const ListGraph* G);
    ~Public_ListGraph() = default;
    void GetAllGraph(std::vector<std::vector<pair>>& Edges) const override;
    void ChengeWeight (int days, int nomber);
private:
    std::vector<std::vector<pair>> NextVert;
};

void Public_ListGraph::GetAllGraph(std::vector<std::vector<pair>>& Edges) const
{
    Edges = NextVert;
}

Public_ListGraph::Public_ListGraph(const ListGraph* G)
{
    G -> GetAllGraph(NextVert);
}

void Public_ListGraph::ChengeWeight(int days, int N)
{
    for(int i = 0; i < N + 1; ++i)
    {
        int size = NextVert[i].size();
        for(int j = 0; j < size; ++j)
        {
            if(NextVert[i][j].weight != 0)
            {
                NextVert[i][j].weight = days;
            }
        }
    }
}
////////////////////
///////////////////
int BFS(std::vector<std::vector<pair>>& Graph, int inf)     //обычный бфс для Edmonds_Carp
{
    int start = 0;
    int end = Graph.size() - 1;
    std::vector<int>Parent(Graph.size(), -1);
    std::vector<int>ParentWeight(Graph.size(), 0);
    std::vector<bool>Used(Graph.size(), false);
    std::queue<int>Queue;
    Queue.push(start);
    Used[start] = true;
    bool have_way = false;
    while(!Queue.empty())
    {
        int next_v = Queue.front();
        Queue.pop();
        for(int i = 0; i < Graph[next_v].size(); ++i)
        {
            int child = Graph[next_v][i].to;
            int weight = Graph[next_v][i].weight;
            if (child == end && weight > 0)
            {
                Parent[child] = next_v;
                ParentWeight[child] = weight;
                have_way = true;
                break;
            }
            if(Used[child] == false && weight > 0)
            {
                Queue.push(child);
                Used[child] = true;
                Parent[child] = next_v;
                ParentWeight[child] = weight;
            }
        }
        if(have_way == true){ break; }
    }
    int min_flow = inf;
    if(have_way == true)
    {
        int now_v = end;
        while(true)
        {
            int parent = Parent[now_v];
            int weight = ParentWeight[now_v];
            if(weight < min_flow)
            {
                min_flow = weight;
            }
            if(parent == start)
            {
                now_v = end;
                break;
            }
            now_v = parent;
        }
        if(min_flow > 0)
        {
            while(true)
            {
                int parent = Parent[now_v];
                for(int i = 0; i < Graph[parent].size(); ++i)
                {
                    if(Graph[parent][i].to == now_v)
                    {
                        Graph[parent][i].weight -= min_flow;
                    }
                }
                for(int i = 0; i < Graph[now_v].size(); ++i)
                {
                    if(Graph[now_v][i].to == parent)
                    {
                        Graph[now_v][i].weight += min_flow;
                    }
                }
                if(parent == start)
                {
                    break;
                }
                now_v = parent;
            }
        }
    }
    return min_flow;
}

int Edmonds_Carp(Public_ListGraph& P_G , int inf)   //ищем максимальный поток
{
    std::vector<std::vector<pair>> Graph;
    P_G.GetAllGraph(Graph);
    int min_flow = inf;
    int flow = 0;
    while(true)
    {
        min_flow = BFS(Graph, inf);
        if(min_flow == inf)
        {
            break;
        }
        else
        {
            flow += min_flow;
        }
    }
    return flow;
}

int Bin_Search(Public_ListGraph& P_G , int inf, int max_days, int N)    //будем считать что минимум дней=0, максимум=max_days
{
    int left = 0;
    int right = max_days; // Левая и правая граница поиска
    while (right - left > 1) // Пока правая граница правее левой
    {
        int mid = (left + right) / 2; // Середина области поиска
        P_G.ChengeWeight(mid, N);
        if (Edmonds_Carp(P_G , inf) == N * mid)
        {
            left = mid; // Передвигаем правую границу
        }
        else
        {
            right = mid ; // Иначе передвигаем левую границу
        }
    }
    P_G.ChengeWeight(right, N);
    if(Edmonds_Carp(P_G , inf) == N * right)
    {
        return right;
    }
    return left;
}

int main()
{
    int N = 0;                  //число человек
    int M = 0;                  //число видов чаём
    int inf = 0;                //оченим бесконечность/
    int max_days = 0;           //количество дней которое точно больше максимального количества
    std::cin >> N >> M;
    int V = N + M + 2;
    ListGraph G(V);
    int start = 0;                          //исток
    int end = V - 1;                        //вток
    int days = 1;                            //изначально считаем что можем продержаться 1 день
    for(int i = 1; i < N + 1; ++i)           //заносим вершины соответствующие людям
    {
        G.AddEdge(start, i, days);
    }
    for(int i = N + 1; i < V - 1; ++i)      //заносим вершины соответствующие сортам чая
    {
        int a_i = 0;
        std::cin >> a_i;
        max_days += a_i;                
        G.AddEdge(i, end, a_i);
    }
    for(int i = 1; i < N + 1; ++i)              
    {
        int numbers = 0;                        //количество любимых сортов у i-го человека
        std::cin >> numbers;
        for(int j = 0; j < numbers; ++j)
        {
            int favorite_tea = 0;
            std::cin >> favorite_tea;                   //считываем вид чая
            G.AddEdge(i, favorite_tea + N, days);       //проводим ребра от человека к любимым сортам чая
        }
    }
    inf = max_days * 2;                 
    max_days = max_days / N + 1;                        //дней не может быть больше чем кол-вл чайных покетиков/кол-во людей
    Public_ListGraph P_G(&G);   
    std::cout << Bin_Search(P_G, inf, max_days, N);    //вместо линейного прохода ищем нужное число дней бинпоиском по ответу 
    return 0;
}



//Строим сеть следующим образом：
 
//1.исток
 
//2.вершины , соответствующие людям
 
//3.вершины, соответствующие сортам чая
 
//4.Вток
 
//Предположим, что все могут пить пить чай n дней подряд
 
//Тогда проведём из истока к каждому человеку ребро веса n
 
//Из каждого человека в излюбленные виды чая по ребру веса n
 
//А из каждого чая в вток количество порций этого чая

//Тогда можно доказать, что если максимальный поток равен n умножить на число людей, то можно прожить n дней

//оценим число дней (max_days) превосходящее максимальное 

//и воспользуемся бинпоиском по ответу
